{
	"compiler": {
		"version": "0.7.6+commit.7338295f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "contract TransparentUpgradeableProxy",
						"name": "proxy",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "newAdmin",
						"type": "address"
					}
				],
				"name": "changeProxyAdmin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract TransparentUpgradeableProxy",
						"name": "proxy",
						"type": "address"
					}
				],
				"name": "getProxyAdmin",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract TransparentUpgradeableProxy",
						"name": "proxy",
						"type": "address"
					}
				],
				"name": "getProxyImplementation",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract TransparentUpgradeableProxy",
						"name": "proxy",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "implementation",
						"type": "address"
					}
				],
				"name": "upgrade",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract TransparentUpgradeableProxy",
						"name": "proxy",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "implementation",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "upgradeAndCall",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.",
			"kind": "dev",
			"methods": {
				"changeProxyAdmin(address,address)": {
					"details": "Changes the admin of `proxy` to `newAdmin`. Requirements: - This contract must be the current admin of `proxy`."
				},
				"getProxyAdmin(address)": {
					"details": "Returns the current admin of `proxy`. Requirements: - This contract must be the admin of `proxy`."
				},
				"getProxyImplementation(address)": {
					"details": "Returns the current implementation of `proxy`. Requirements: - This contract must be the admin of `proxy`."
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"upgrade(address,address)": {
					"details": "Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}. Requirements: - This contract must be the admin of `proxy`."
				},
				"upgradeAndCall(address,address,bytes)": {
					"details": "Upgrades `proxy` to `implementation` and calls a function on the new implementation. See {TransparentUpgradeableProxy-upgradeToAndCall}. Requirements: - This contract must be the admin of `proxy`."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"proxy/ProxyAdmin.sol": "ProxyAdmin"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"access/Ownable.sol": {
			"keccak256": "0x1382393b3f0b4821d25783bb753b82f7c72c4f8e88280fcd05f1cee2fea00d77",
			"license": "MIT",
			"urls": [
				"bzz-raw://eb8565075b7e0e9c0abdd0ed01346744d89cb9f6875aa35b61b10bb237636f48",
				"dweb:/ipfs/Qmdw78UoJEzJdcUYe6EqpiacYUwK8hGWXKFrW986vKSkcW"
			]
		},
		"proxy/Proxy.sol": {
			"keccak256": "0xc9f8d188cc6978a0bf72b7bc83e86c396f2fc37f726994747397df728357e799",
			"license": "MIT",
			"urls": [
				"bzz-raw://2642081750c7caec73823eeae61214c43ee476030bd4fcba51290cfe62fde8f8",
				"dweb:/ipfs/QmVP35SsGyNWmknzRJBdCYwj5tfeV2V4sAVQFX5ukHmEud"
			]
		},
		"proxy/ProxyAdmin.sol": {
			"keccak256": "0xfebde7a7f61c571566253fdddc71c9108c445a4c941d12e5e6096b968a2f961b",
			"license": "MIT",
			"urls": [
				"bzz-raw://dbaefc320eba923adc3bb71c6a6cb11858cede81b9430d110131cfd552439f5d",
				"dweb:/ipfs/QmQbqyowk3jQkbZwmT7gkM4Uor32DEgssTb4SnxP6r9KCY"
			]
		},
		"proxy/TransparentUpgradeableProxy.sol": {
			"keccak256": "0xf1b09d99603fb99df5006594e386e2a7c3e9c982f4d7bcb3f59e20b009b1083a",
			"license": "MIT",
			"urls": [
				"bzz-raw://8dbf97ff7799e582cefa8fbb395de47c1c0b9ed9ba8af3d5b1214b9287f9fc0d",
				"dweb:/ipfs/QmcxQS9Vd2nptVSc8t7MVJLBpNxoDjXAAwhV78WPCwmevG"
			]
		},
		"proxy/UpgradeableProxy.sol": {
			"keccak256": "0x436aa3236c61ae4c4b48a59e2838e0a651b6a54349a33836f3d61c4d2a75932c",
			"license": "MIT",
			"urls": [
				"bzz-raw://86b51ff2760603cc7f6b45350424824a04ebc54adac804f2907d30f2867eb6eb",
				"dweb:/ipfs/QmZJKJTjDvLqmZFNkj7Qom4moiLcqEE8NyqfQ3sj1EyN9w"
			]
		},
		"utils/Address.sol": {
			"keccak256": "0x292e71c523a7d3579b814198a3e161e77410d48b4bc025b9d7efa42cd6ba70d4",
			"license": "MIT",
			"urls": [
				"bzz-raw://4cb20cac3fbbf051c339230d99b35349703bd4f946a40066e0eaa903ab33ae2d",
				"dweb:/ipfs/Qmeae7ixa2AwtEpwhTTVxuf2UJyheJEdDKzHyvrWoyHNpL"
			]
		},
		"utils/Context.sol": {
			"keccak256": "0xd3e88da8695a1d63936f7bbf3b3441056c44d167e679a80f9a1b5ffafb11fad9",
			"license": "MIT",
			"urls": [
				"bzz-raw://587786c556944a0a561b5f5ab16716263b42ca8dd6cc1102b75f4c4d1a802325",
				"dweb:/ipfs/QmU9Y13bBrVy2uE4TiHfPSTFQXV2BeUnxrMo135zRy7wJT"
			]
		}
	},
	"version": 1
}